{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/SpecieSelector.svelte",
    "../src/JsonEditor.svelte",
    "../src/EditableTextArea.svelte",
    "../src/EditableTextLine.svelte",
    "../src/EditableObjectList.svelte",
    "../src/EditableTextList.svelte",
    "../src/EditableImgObj.svelte",
    "../src/EditableLinkObj.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, onDestroy, setContext } from \"svelte\";\n  import config from \"./config\";\n  import { getJson } from \"./utils/getJson\";\n  import FamilySelector from \"./FamilySelector.svelte\";\n  import SpecieSelector from \"./SpecieSelector.svelte\";\n  import JsonEditor from \"./JsonEditor.svelte\";\n  import Exporter from \"./Exporter.svelte\";\n  import Save from \"./Save.svelte\";\n  import Recover from \"./Recover.svelte\";\n  import Reset from \"./Reset.svelte\";\n  import { json, savedSpecie } from \"./stores.js\";\n\n  let selectedFamily = \"\";\n  let selectedSpecie = \"\";\n  let scientific_name = \"\";\n\n  setContext(\"family\", {\n    setFamily: value => {\n      selectedFamily = value;\n      selectedSpecie = \"\";\n      json.set({});\n    }\n  });\n  setContext(\"specie\", {\n    setSpecie: value => {\n      selectedSpecie = value;\n      json.set({});\n    }\n  });\n\n  onMount(() => {\n    const S_KEY_CODE = 83;\n    document.addEventListener(\n      \"keydown\",\n      function(e) {\n        if (\n          (window.navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey) &&\n          e.keyCode == S_KEY_CODE\n        ) {\n          e.preventDefault();\n          if ($json.items_id) {\n            window.localStorage.setItem($json.items_id, JSON.stringify($json));\n            savedSpecie.set($json.items_id);\n          }\n        }\n      },\n      false\n    );\n  });\n\n  $: {\n    getJson({ config, specie: selectedSpecie }).then(data => json.set(data));\n  }\n</script>\n\n<style type=\"text/scss\">h1,\nh2 {\n  color: #424242;\n  padding: 0 1rem; }\n\n.hero {\n  background-color: #ffc107;\n  padding: 1rem; }\n\n.container {\n  padding: 1rem 0 0; }\n\n.heading {\n  display: flex;\n  flex-flow: row;\n  align-items: center; }\n\n.heading img {\n  max-width: 48px; }\n\n/*# sourceMappingURL=App.svelte.css.map */</style>\n\n<main>\n  <section class=\"container\">\n    <div class=\"heading\">\n      <img src=\"libellula-bw.png\" alt=\"libellula\" />\n      <h1 class=\"h4\">Dragonfly API JSON Editor</h1>\n    </div>\n\n    <div class=\"row hero\">\n      <div class=\"col-sm-4\">\n        <FamilySelector />\n        <SpecieSelector {selectedFamily} {selectedSpecie} />\n      </div>\n      <div class=\"col-sm-8\">\n        {#if $json.scientific_name}\n          <h2 class=\"h4\">{$json.scientific_name}</h2>\n        {/if}\n      </div>\n    </div>\n  </section>\n  <section class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        <JsonEditor />\n\n        <div>\n          <Exporter />\n          <Save />\n          <Recover />\n          <Reset {selectedSpecie} />\n        </div>\n      </div>\n    </div>\n  </section>\n</main>\n",
    "<script>\n  import config from \"./config\";\n  import { getContext } from \"svelte\";\n\n  export let selectedFamily;\n  export let selectedSpecie;\n  let selected;\n\n  let species = [];\n  $: {\n    if (selectedFamily) {\n      species = Object.keys(config.dataTree[selectedFamily]).reduce(\n        (acc, genus) => {\n          return acc.concat(config.dataTree[selectedFamily][genus]);\n        },\n        []\n      );\n    }\n  }\n\n  const { setSpecie } = getContext(\"specie\");\n\n  function handleChange() {\n    setSpecie(selected);\n  }\n</script>\n\n<style>\n  @media only screen and (max-width: 960px) {\n    .select-specie {\n      margin-top: 0.5rem;\n    }\n  }\n</style>\n\n{#if selectedFamily}\n  <div class=\"select select-specie\">\n    <select id=\"species\" bind:value={selected} on:change={handleChange}>\n      <option>VÃ¤lj en art inom {selectedFamily}</option>\n      {#each species as specie}\n        <option selected={specie === selectedSpecie} value={specie}>\n          {specie}\n        </option>\n      {/each}\n    </select>\n  </div>\n{/if}\n",
    "<script>\n  import { setContext } from \"svelte\";\n  import EditableTextArea from \"./EditableTextArea.svelte\";\n  import EditableTextLine from \"./EditableTextLine.svelte\";\n  import EditableTextList from \"./EditableTextList.svelte\";\n  import EditableObjectList from \"./EditableObjectList.svelte\";\n  import EditableImgObj from \"./EditableImgObj.svelte\";\n  import EditableLinkObj from \"./EditableLinkObj.svelte\";\n  import { json } from \"./stores.js\";\n\n  const redListOptions = [\n    \"\",\n    \"Not Evaluated\",\n    \"Not present\",\n    \"Not Applicable\",\n    \"Data Deficient\",\n    \"Least Concern\",\n    \"Least Concern to Near threatened depending on subspecies\",\n    \"Near threatened\",\n    \"Vulnerable\",\n    \"Endangered\",\n    \"Endangered to Critically Endangered depending on subspecies\",\n    \"Critically endangered\",\n    \"Extinct in the wild\",\n    \"Extinct\"\n  ];\n\n  const habitasDirectiveOptions = [\"\", \"No\", \"II\", \"IV\", \"II+IV\"];\n  const endemicOptions = [\"\", \"No\", \"Endemic\"];\n  const trendOptions = [\n    \"\",\n    \"Increasing\",\n    \"Stable\",\n    \"Decreasing\",\n    \"Unknown\",\n    \"Stable to Decreasing depending on subspecie\"\n  ];\n  // const booleanOptions = [\"Yes\", \"No\"];\n\n  const redListSelectors = {\n    habitats_directive: habitasDirectiveOptions,\n    red_list_EU27: redListOptions,\n    red_list_europe: redListOptions,\n    red_list_mediterranean: redListOptions,\n    EU27_endemic: endemicOptions,\n    red_list_europe_endemic: endemicOptions,\n    trend_europe: trendOptions\n  };\n</script>\n\n<style type=\"text/scss\">.editors {\n  padding: 0 1rem; }\n\n/*# sourceMappingURL=JsonEditor.svelte.css.map */</style>\n\n{#if $json.scientific_name}\n  <div class=\"editors\">\n    <EditableTextLine key=\"scientific_name\" />\n    <EditableTextLine key=\"author_citation\" />\n    <EditableTextList key=\"local_names\" />\n    <EditableTextArea key=\"description\" />\n    <EditableTextArea key=\"behaviour\" />\n    <EditableTextArea key=\"distribution\" />\n    <EditableTextArea key=\"habitat\" />\n    <EditableObjectList key=\"size\" selectors={null} />\n    <EditableTextList key=\"similar_species\" />\n    <EditableTextLine key=\"flight_period\" />\n    <EditableObjectList key=\"red_list\" selectors={redListSelectors} />\n    <EditableImgObj key=\"images\" />\n    <EditableTextList key=\"sources\" />\n    <EditableLinkObj key=\"links\" />\n  </div>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n\n  $: open = $openField === key;\n\n  function getLabel() {\n    return key.replace(\"_\", \" \");\n  }\n\n  function handleChange(key) {\n    $openField = key;\n  }\n</script>\n\n<style type=\"text/scss\">.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\n/*# sourceMappingURL=EditableTextArea.svelte.css.map */</style>\n\n{#if !open}\n  <button\n    class=\"truncate button-primary-text\"\n    on:click={() => handleChange(key)}>\n    <label>{getLabel()}</label>\n    : {$json[key]}\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label for={`input_text_${key}`}>{key}</label>\n    </button>\n    <textarea id={`input_text_${key}`} name={key} class=\"\" rows={12} bind:value={$json[key]}></textarea>\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n  </fieldset>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n\n  $: open = $openField === key;\n\n  function getLabel() {\n    return key.replace(\"_\", \" \");\n  }\n\n  function handleChange(key) {\n    $openField = key;\n  }\n</script>\n\n<style type=\"text/scss\">.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\ninput {\n  margin-bottom: 0.5rem; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\n/*# sourceMappingURL=EditableTextLine.svelte.css.map */</style>\n\n{#if !open}\n  <button\n    class=\"truncate button-primary-text\"\n    on:click={() => handleChange(key)}>\n    <label>{getLabel()}</label>\n    : {$json[key]}\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label for={`input_text_${key}`}>{key}</label>\n    </button>\n    <input\n      type=\"text\"\n      id={`input_text_${key}`}\n      name={key}\n      bind:value={$json[key]}\n      class=\"\" />\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n\n  </fieldset>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n  export let selectors;\n  let selectedValue = {};\n\n  $: open = $openField === key;\n\n  function getLabel() {\n    return key.replace(\"_\", \" \");\n  }\n\n  function getTruncatedValue() {\n    return JSON.stringify($json[key]).replace(/[{}\"]/g, \"\");\n  }\n\n  function handleChange(key) {\n    $openField = key;\n  }\n\n  function handleSelect(_key) {\n    $json[key][_key] = selectedValue[_key];\n  }\n</script>\n\n<style type=\"text/scss\">input {\n  margin: 0.5rem 0 0; }\n\n.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\nul {\n  list-style: none; }\n\n/*# sourceMappingURL=EditableObjectList.svelte.css.map */</style>\n\n{#if !open}\n  <button\n    class=\"truncate button-primary-text\"\n    on:click={() => handleChange(key)}>\n    <label>{getLabel()}</label>\n    : {getTruncatedValue()}\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label>{key}</label>\n    </button>\n    <ul>\n      {#each Object.keys($json[key]) as _key, i}\n        <li>\n          <label for={`input_text_${_key}`}>{_key}</label>\n          {#if selectors}\n            <select\n              bind:value={selectedValue[_key]}\n              on:change={() => handleSelect(_key)}>\n              {#each selectors[_key] as selectable}\n                <option\n                  selected={selectable === $json[key][_key]}\n                  value={selectable}>\n                  {selectable}\n                </option>\n              {/each}\n            </select>\n          {:else}\n            <input\n              type=\"text\"\n              id={`input_text_${_key}`}\n              bind:value={$json[key][_key]}\n              class=\"\" />\n          {/if}\n        </li>\n      {/each}\n    </ul>\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n  </fieldset>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n\n  $: open = $openField === key;\n\n  function getLabel() {\n    return key.replace(\"_\", \" \");\n  }\n\n  function handleDelete(i) {\n    $json[key] = $json[key].slice(0, i).concat($json[key].slice(i + 1));\n  }\n\n  function handleChange(key) {\n    $openField = key;\n  }\n\n  function handleAdd() {\n    $json[key] = [...$json[key], \"\"];\n  }\n</script>\n\n<style type=\"text/scss\">.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\ninput {\n  margin: 0.5rem 0 0; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\nul {\n  list-style: none; }\n\nli {\n  display: flex; }\n\nli input {\n  flex: 1 1 auto; }\n\nli button {\n  margin: 0.5rem 0 0;\n  white-space: nowrap; }\n\n/*# sourceMappingURL=EditableTextList.svelte.css.map */</style>\n\n{#if !open}\n  <button\n    class=\"truncate button-primary-text\"\n    on:click={() => handleChange(key)}>\n    <label>{getLabel()}</label>\n    : {$json[key]}\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label for={`input_text_${key}`}>{key}</label>\n    </button>\n    <ul>\n      {#each $json[key] as name, i}\n        <li>\n          <input\n            type=\"text\"\n            id={`input_text_${name}`}\n            bind:value={name}\n            class=\"\" />\n          <button\n            type=\"button\"\n            class=\"button-primary-text\"\n            on:click={() => handleDelete(i)}>\n            -\n          </button>\n        </li>\n      {/each}\n    </ul>\n    <button type=\"button\" on:click={handleAdd}>+ Add name</button>\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n  </fieldset>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n  let selectedValue = {};\n\n  let imgKeys = [\"public_id\", \"caption\", \"license\", \"lic_url\", \"by\", \"url\"];\n\n  $: open = $openField === key;\n\n  function handleChange() {\n    $openField = key;\n  }\n\n  function handleSelect(_key) {\n    $json[key][_key] = selectedValue[_key];\n  }\n\n  function addImage() {\n    $json.images.all = [\n      ...$json.images.all,\n      {\n        public_id: \"\",\n        caption: \"\",\n        license: \"CC BY 3.0\",\n        lic_url: \"https://creativecommons.org/licenses/by/3.0/\",\n        by: \"GÃ¶ran Liljeberg\",\n        url: \"http://liljebergs.nu/\"\n      }\n    ];\n  }\n</script>\n\n<style type=\"text/scss\">input {\n  margin: 0.5rem 0 0; }\n\n.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\n.indented-list {\n  margin-left: 1rem; }\n\nul {\n  list-style: none; }\n\n/*# sourceMappingURL=EditableImgObj.svelte.css.map */</style>\n\n{#if !open}\n  <button class=\"truncate button-primary-text\" on:click={() => handleChange()}>\n    <label>images</label>\n    : '...'\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label>images</label>\n    </button>\n    <ul>\n      <li>\n        <label for={`input_text_pid_cloud_name`}>cloud_name</label>\n        <input\n          type=\"text\"\n          id={`input_text_pid_cloud_name`}\n          name=\"pId_cloud_name\"\n          bind:value={$json.images.cloud_name}\n          class=\"\" />\n      </li>\n\n      {#each $json.images.all as image, idx}\n        <button class=\"truncate button-primary-text\">\n          <label>Image {idx}</label>\n        </button>\n        <ul class=\"indented-list\">\n          {#each imgKeys as _key}\n            <li>\n              <label for={`img_${_key}_${idx}`}>{_key}</label>\n              <input\n                type=\"text\"\n                id={`img_${_key}_${idx}`}\n                name={`img_${_key}_${idx}`}\n                bind:value={$json.images.all[idx][_key]}\n                class=\"\" />\n            </li>\n          {/each}\n        </ul>\n      {/each}\n    </ul>\n    <button class=\"button-primary-text\" on:click={() => addImage()}>\n      Add image\n    </button>\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n  </fieldset>\n{/if}\n",
    "<script>\n  import { getContext } from \"svelte\";\n  import { json, openField } from \"./stores.js\";\n\n  export let key;\n  export let open = false;\n  let selectedValue = {};\n\n  let linkKeys = [\"label\", \"link\"];\n\n  $: open = $openField === key;\n\n  function handleChange() {\n    $openField = key;\n  }\n\n  function handleSelect(_key) {\n    $json[key][_key] = selectedValue[_key];\n  }\n\n  function addLink() {\n    $json.links = [\n      ...$json.links,\n      {\n        label: \"\",\n        link: \"\"\n      }\n    ];\n  }\n</script>\n\n<style type=\"text/scss\">input {\n  margin: 0.5rem 0 0; }\n\n.truncate {\n  display: block;\n  max-width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  margin-bottom: 0;\n  padding-left: 0; }\n\n.close {\n  padding-left: 0;\n  margin-bottom: 0; }\n\n.indented-list {\n  margin-left: 1rem; }\n\nul {\n  list-style: none; }\n\n/*# sourceMappingURL=EditableLinkObj.svelte.css.map */</style>\n\n{#if !open}\n  <button class=\"truncate button-primary-text\" on:click={() => handleChange()}>\n    <label>links</label>\n    : '...'\n  </button>\n{:else}\n  <fieldset>\n    <button\n      class=\"truncate button-primary-text\"\n      on:click={() => ($openField = null)}>\n      <label>links</label>\n    </button>\n    <ul>\n      {#each $json.links as link, idx}\n        <button class=\"truncate button-primary-text\">\n          <label>Link {idx}</label>\n        </button>\n        <ul class=\"indented-list\">\n          {#each linkKeys as _key}\n            <li>\n              <label for={`link_${_key}_${idx}`}>{_key}</label>\n              <input\n                type=\"text\"\n                id={`link_${_key}_${idx}`}\n                name={`link_${_key}_${idx}`}\n                bind:value={$json.links[idx][_key]}\n                class=\"\" />\n            </li>\n          {/each}\n        </ul>\n      {/each}\n    </ul>\n    <button class=\"button-primary-text\" on:click={() => addLink()}>\n      Add link\n    </button>\n    <button\n      class=\"close button-primary-text\"\n      on:click={() => ($openField = null)}>\n      Close\n    </button>\n  </fieldset>\n{/if}\n"
  ],
  "names": [],
  "mappings": "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"
}